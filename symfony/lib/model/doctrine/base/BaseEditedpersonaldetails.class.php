<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('Editedpersonaldetails', 'doctrine');

/**
 * BaseEditedpersonaldetails
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $employee_id
 * @property integer $audit_id
 * @property string $first_name
 * @property string $last_name
 * @property string $middle_name
 * @property string $idpasssport
 * @property string $dob
 * @property integer $gender
 * @property integer $nationality
 * @property string $tax_no
 * @property string $idpassportexpiry
 * @property string $previouscurrent
 * @property timestamp $updated
 * 
 * @method integer               getId()               Returns the current record's "id" value
 * @method integer               getEmployeeId()       Returns the current record's "employee_id" value
 * @method integer               getAuditId()          Returns the current record's "audit_id" value
 * @method string                getFirstName()        Returns the current record's "first_name" value
 * @method string                getLastName()         Returns the current record's "last_name" value
 * @method string                getMiddleName()       Returns the current record's "middle_name" value
 * @method string                getIdpasssport()      Returns the current record's "idpasssport" value
 * @method string                getDob()              Returns the current record's "dob" value
 * @method integer               getGender()           Returns the current record's "gender" value
 * @method integer               getNationality()      Returns the current record's "nationality" value
 * @method string                getTaxNo()            Returns the current record's "tax_no" value
 * @method string                getIdpassportexpiry() Returns the current record's "idpassportexpiry" value
 * @method string                getPreviouscurrent()  Returns the current record's "previouscurrent" value
 * @method timestamp             getUpdated()          Returns the current record's "updated" value
 * @method Editedpersonaldetails setId()               Sets the current record's "id" value
 * @method Editedpersonaldetails setEmployeeId()       Sets the current record's "employee_id" value
 * @method Editedpersonaldetails setAuditId()          Sets the current record's "audit_id" value
 * @method Editedpersonaldetails setFirstName()        Sets the current record's "first_name" value
 * @method Editedpersonaldetails setLastName()         Sets the current record's "last_name" value
 * @method Editedpersonaldetails setMiddleName()       Sets the current record's "middle_name" value
 * @method Editedpersonaldetails setIdpasssport()      Sets the current record's "idpasssport" value
 * @method Editedpersonaldetails setDob()              Sets the current record's "dob" value
 * @method Editedpersonaldetails setGender()           Sets the current record's "gender" value
 * @method Editedpersonaldetails setNationality()      Sets the current record's "nationality" value
 * @method Editedpersonaldetails setTaxNo()            Sets the current record's "tax_no" value
 * @method Editedpersonaldetails setIdpassportexpiry() Sets the current record's "idpassportexpiry" value
 * @method Editedpersonaldetails setPreviouscurrent()  Sets the current record's "previouscurrent" value
 * @method Editedpersonaldetails setUpdated()          Sets the current record's "updated" value
 * 
 * @package    orangehrm
 * @subpackage model\base
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseEditedpersonaldetails extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('editedpersonaldetails');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('employee_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('audit_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('first_name', 'string', 50, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 50,
             ));
        $this->hasColumn('last_name', 'string', 50, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 50,
             ));
        $this->hasColumn('middle_name', 'string', 50, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 50,
             ));
        $this->hasColumn('idpasssport', 'string', 20, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 20,
             ));
        $this->hasColumn('dob', 'string', 20, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 20,
             ));
        $this->hasColumn('gender', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('nationality', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('tax_no', 'string', 20, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 20,
             ));
        $this->hasColumn('idpassportexpiry', 'string', 20, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 20,
             ));
        $this->hasColumn('previouscurrent', 'string', 2, array(
             'type' => 'string',
             'fixed' => 1,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 2,
             ));
        $this->hasColumn('updated', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 25,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        
    }
}