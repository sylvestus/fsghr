<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('Users', 'doctrine');

/**
 * BaseUsers
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $username
 * @property string $password
 * @property string $email
 * @property string $pp_email
 * @property string $fname
 * @property string $lname
 * @property integer $ttl_id
 * @property blob $company
 * @property string $address
 * @property string $city
 * @property string $state
 * @property string $zip
 * @property integer $country
 * @property string $currency
 * @property string $phone
 * @property string $vat
 * @property string $avatar
 * @property integer $userlevel
 * @property blob $user_image
 * @property string $img_size
 * @property string $img_type
 * @property timestamp $created
 * @property string $notes
 * @property string $custom_fields
 * @property decimal $credit
 * @property timestamp $lastlogin
 * @property string $lastip
 * @property enum $active
 * 
 * @method integer   getId()            Returns the current record's "id" value
 * @method string    getUsername()      Returns the current record's "username" value
 * @method string    getPassword()      Returns the current record's "password" value
 * @method string    getEmail()         Returns the current record's "email" value
 * @method string    getPpEmail()       Returns the current record's "pp_email" value
 * @method string    getFname()         Returns the current record's "fname" value
 * @method string    getLname()         Returns the current record's "lname" value
 * @method integer   getTtlId()         Returns the current record's "ttl_id" value
 * @method blob      getCompany()       Returns the current record's "company" value
 * @method string    getAddress()       Returns the current record's "address" value
 * @method string    getCity()          Returns the current record's "city" value
 * @method string    getState()         Returns the current record's "state" value
 * @method string    getZip()           Returns the current record's "zip" value
 * @method integer   getCountry()       Returns the current record's "country" value
 * @method string    getCurrency()      Returns the current record's "currency" value
 * @method string    getPhone()         Returns the current record's "phone" value
 * @method string    getVat()           Returns the current record's "vat" value
 * @method string    getAvatar()        Returns the current record's "avatar" value
 * @method integer   getUserlevel()     Returns the current record's "userlevel" value
 * @method blob      getUserImage()     Returns the current record's "user_image" value
 * @method string    getImgSize()       Returns the current record's "img_size" value
 * @method string    getImgType()       Returns the current record's "img_type" value
 * @method timestamp getCreated()       Returns the current record's "created" value
 * @method string    getNotes()         Returns the current record's "notes" value
 * @method string    getCustomFields()  Returns the current record's "custom_fields" value
 * @method decimal   getCredit()        Returns the current record's "credit" value
 * @method timestamp getLastlogin()     Returns the current record's "lastlogin" value
 * @method string    getLastip()        Returns the current record's "lastip" value
 * @method enum      getActive()        Returns the current record's "active" value
 * @method Users     setId()            Sets the current record's "id" value
 * @method Users     setUsername()      Sets the current record's "username" value
 * @method Users     setPassword()      Sets the current record's "password" value
 * @method Users     setEmail()         Sets the current record's "email" value
 * @method Users     setPpEmail()       Sets the current record's "pp_email" value
 * @method Users     setFname()         Sets the current record's "fname" value
 * @method Users     setLname()         Sets the current record's "lname" value
 * @method Users     setTtlId()         Sets the current record's "ttl_id" value
 * @method Users     setCompany()       Sets the current record's "company" value
 * @method Users     setAddress()       Sets the current record's "address" value
 * @method Users     setCity()          Sets the current record's "city" value
 * @method Users     setState()         Sets the current record's "state" value
 * @method Users     setZip()           Sets the current record's "zip" value
 * @method Users     setCountry()       Sets the current record's "country" value
 * @method Users     setCurrency()      Sets the current record's "currency" value
 * @method Users     setPhone()         Sets the current record's "phone" value
 * @method Users     setVat()           Sets the current record's "vat" value
 * @method Users     setAvatar()        Sets the current record's "avatar" value
 * @method Users     setUserlevel()     Sets the current record's "userlevel" value
 * @method Users     setUserImage()     Sets the current record's "user_image" value
 * @method Users     setImgSize()       Sets the current record's "img_size" value
 * @method Users     setImgType()       Sets the current record's "img_type" value
 * @method Users     setCreated()       Sets the current record's "created" value
 * @method Users     setNotes()         Sets the current record's "notes" value
 * @method Users     setCustomFields()  Sets the current record's "custom_fields" value
 * @method Users     setCredit()        Sets the current record's "credit" value
 * @method Users     setLastlogin()     Sets the current record's "lastlogin" value
 * @method Users     setLastip()        Sets the current record's "lastip" value
 * @method Users     setActive()        Sets the current record's "active" value
 * 
 * @package    orangehrm
 * @subpackage model\base
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseUsers extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('users');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('username', 'string', 50, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 50,
             ));
        $this->hasColumn('password', 'string', 50, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 50,
             ));
        $this->hasColumn('email', 'string', 50, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 50,
             ));
        $this->hasColumn('pp_email', 'string', 50, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 50,
             ));
        $this->hasColumn('fname', 'string', 32, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 32,
             ));
        $this->hasColumn('lname', 'string', 32, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 32,
             ));
        $this->hasColumn('ttl_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('company', 'blob', null, array(
             'type' => 'blob',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => '',
             ));
        $this->hasColumn('address', 'string', 200, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 200,
             ));
        $this->hasColumn('city', 'string', 50, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 50,
             ));
        $this->hasColumn('state', 'string', 50, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 50,
             ));
        $this->hasColumn('zip', 'string', 20, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 20,
             ));
        $this->hasColumn('country', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('currency', 'string', 10, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 10,
             ));
        $this->hasColumn('phone', 'string', 16, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 16,
             ));
        $this->hasColumn('vat', 'string', 60, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 60,
             ));
        $this->hasColumn('avatar', 'string', 60, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 60,
             ));
        $this->hasColumn('userlevel', 'integer', 1, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '1',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 1,
             ));
        $this->hasColumn('user_image', 'blob', null, array(
             'type' => 'blob',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => '',
             ));
        $this->hasColumn('img_size', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('img_type', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('created', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0000-00-00 00:00:00',
             'notnull' => false,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('notes', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => '',
             ));
        $this->hasColumn('custom_fields', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => '',
             ));
        $this->hasColumn('credit', 'decimal', 10, array(
             'type' => 'decimal',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0.00',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 10,
             'scale' => '2',
             ));
        $this->hasColumn('lastlogin', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0000-00-00 00:00:00',
             'notnull' => false,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('lastip', 'string', 16, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => false,
             'autoincrement' => false,
             'length' => 16,
             ));
        $this->hasColumn('active', 'enum', 1, array(
             'type' => 'enum',
             'fixed' => 0,
             'unsigned' => false,
             'values' => 
             array(
              0 => 'y',
              1 => 'n',
              2 => 't',
              3 => 'b',
             ),
             'primary' => false,
             'default' => 'n',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 1,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        
    }
}