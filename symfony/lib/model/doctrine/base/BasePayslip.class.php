<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('Payslip', 'doctrine');

/**
 * BasePayslip
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $empname
 * @property string $department
 * @property string $emp_number
 * @property string $employment_income
 * @property decimal $taxable_income
 * @property string $paidday
 * @property string $presentday
 * @property string $weekoff
 * @property string $total_leaves
 * @property double $dividends
 * @property string $payslip_no
  * @property integer $basic_pay
 * @property integer $house_allowance
 * @property string $gross_pay
 * @property decimal $total_deductions
 * @property integer $paid_days
 * @property string $total_earnings
 * @property string $personal_relief
 * @property string $insurance_relief
 * @property string $nhif
 * @property string $nssf
 * @property integer $loan_deduction
 * @property string $nettax_payable
 * @property decimal $net_pay
 * @property string $prepared_by
 * @property string $authorised_sign
 * @property string $employee_sign
 * @property date $payslipdate
 * @property timestamp $time
 * @property integer $effected
 * 
 * @method integer   getId()                Returns the current record's "id" value
 * @method string    getEmpname()           Returns the current record's "empname" value
 * @method string    getDepartment()        Returns the current record's "department" value
 * @method string    getEmpNumber()         Returns the current record's "emp_number" value
 * @method string    getEmploymentIncome()  Returns the current record's "employment_income" value
 * @method decimal   getTaxableIncome()     Returns the current record's "taxable_income" value
  * @method integer   getBasicPay()     Returns the current record's "taxable_income" value
  * @method integer   getHouseAllowance()     Returns the current record's "taxable_income" value
 * @method string    getPaidday()           Returns the current record's "paidday" value
 * @method string    getPresentday()        Returns the current record's "presentday" value
 * @method string    getWeekoff()           Returns the current record's "weekoff" value
 * @method string    getTotalLeaves()       Returns the current record's "total_leaves" value
 * @method double    getDividends()         Returns the current record's "dividends" value
 * @method string    getPayslipNo()         Returns the current record's "payslip_no" value
 * @method string    getGrossPay()          Returns the current record's "gross_pay" value
 * @method decimal   getTotalDeductions()   Returns the current record's "total_deductions" value
 * @method integer   getPaidDays()          Returns the current record's "paid_days" value
 * @method string    getTotalEarnings()     Returns the current record's "total_earnings" value
 * @method string    getPersonalRelief()    Returns the current record's "personal_relief" value
 * @method string    getInsuranceRelief()   Returns the current record's "insurance_relief" value
 * @method string    getNhif()              Returns the current record's "nhif" value
 * @method string    getNssf()              Returns the current record's "nssf" value
 * @method integer   getLoanDeduction()     Returns the current record's "loan_deduction" value
 * @method string    getNettaxPayable()     Returns the current record's "nettax_payable" value
 * @method decimal   getNetPay()            Returns the current record's "net_pay" value
 * @method string    getPreparedBy()        Returns the current record's "prepared_by" value
 * @method string    getAuthorisedSign()    Returns the current record's "authorised_sign" value
 * @method string    getEmployeeSign()      Returns the current record's "employee_sign" value
 * @method date      getPayslipdate()       Returns the current record's "payslipdate" value
 * @method timestamp getTime()              Returns the current record's "time" value
 * @method integer   getEffected()          Returns the current record's "effected" value
 * @method Payslip   setId()                Sets the current record's "id" value
 * @method Payslip   setEmpname()           Sets the current record's "empname" value
 * @method Payslip   setDepartment()        Sets the current record's "department" value
 * @method Payslip   setEmpNumber()         Sets the current record's "emp_number" value
 * @method Payslip   setEmploymentIncome()  Sets the current record's "employment_income" value
 * @method Payslip   setTaxableIncome()     Sets the current record's "taxable_income" value
 * @method Payslip   setBasicPay()     Sets the current record's "taxable_income" value
* @method Payslip   setHouseAllowance()     Sets the current record's "taxable_income" value
 * @method Payslip   setPaidday()           Sets the current record's "paidday" value
 * @method Payslip   setPresentday()        Sets the current record's "presentday" value
 * @method Payslip   setWeekoff()           Sets the current record's "weekoff" value
 * @method Payslip   setTotalLeaves()       Sets the current record's "total_leaves" value
 * @method Payslip   setDividends()         Sets the current record's "dividends" value
 * @method Payslip   setPayslipNo()         Sets the current record's "payslip_no" value
 * @method Payslip   setGrossPay()          Sets the current record's "gross_pay" value
 * @method Payslip   setTotalDeductions()   Sets the current record's "total_deductions" value
 * @method Payslip   setPaidDays()          Sets the current record's "paid_days" value
 * @method Payslip   setTotalEarnings()     Sets the current record's "total_earnings" value
 * @method Payslip   setPersonalRelief()    Sets the current record's "personal_relief" value
 * @method Payslip   setInsuranceRelief()   Sets the current record's "insurance_relief" value
 * @method Payslip   setNhif()              Sets the current record's "nhif" value
 * @method Payslip   setNssf()              Sets the current record's "nssf" value
 * @method Payslip   setLoanDeduction()     Sets the current record's "loan_deduction" value
 * @method Payslip   setNettaxPayable()     Sets the current record's "nettax_payable" value
 * @method Payslip   setNetPay()            Sets the current record's "net_pay" value
 * @method Payslip   setPreparedBy()        Sets the current record's "prepared_by" value
 * @method Payslip   setAuthorisedSign()    Sets the current record's "authorised_sign" value
 * @method Payslip   setEmployeeSign()      Sets the current record's "employee_sign" value
 * @method Payslip   setPayslipdate()       Sets the current record's "payslipdate" value
 * @method Payslip   setTime()              Sets the current record's "time" value
 * @method Payslip   setEffected()          Sets the current record's "effected" value
 * 
 * @package    orangehrm
 * @subpackage model\payroll\base
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BasePayslip extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('payslip');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('empname', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('department', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('emp_number', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('employment_income', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('taxable_income', 'decimal', 10, array(
             'type' => 'decimal',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 10,
             'scale' => '2',
             ));

 $this->hasColumn('basic_pay', 'decimal', 10, array(
             'type' => 'decimal',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 10,
             'scale' => '2',
             ));
         
        $this->hasColumn('house_allowance', 'decimal', 10, array(
             'type' => 'decimal',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 10,
             'scale' => '2',
             ));
        $this->hasColumn('paidday', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('presentday', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('weekoff', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('total_leaves', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('dividends', 'double', 10, array(
             'type' => 'double',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 10,
             ));
        $this->hasColumn('payslip_no', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('gross_pay', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('total_deductions', 'decimal', 10, array(
             'type' => 'decimal',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 10,
             'scale' => '2',
             ));
        $this->hasColumn('paid_days', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('total_earnings', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('personal_relief', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('insurance_relief', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('nhif', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('nssf', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 255,
             ));
         $this->hasColumn('loan_deduction', 'integer',11, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' =>11,
             ));
        $this->hasColumn('nettax_payable', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('net_pay', 'decimal', 10, array(
             'type' => 'decimal',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 10,
             'scale' => '2',
             ));
        $this->hasColumn('prepared_by', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('authorised_sign', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('employee_sign', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('payslipdate', 'date', 25, array(
             'type' => 'date',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('time', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('effected', 'integer', 1, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 1,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        
    }
}
