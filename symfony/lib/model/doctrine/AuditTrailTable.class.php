<?php

/**
 * AuditTrailTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class AuditTrailTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object AuditTrailTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('AuditTrail');
    }
    
    
    
    
    public static function getAuditTrail($offset=0,$limit=200){
         try {
            $q = Doctrine_Query:: create()->from('AuditTrail aud')
                     
                                    ->orderBy('aud.id DESC')
                    
                    ->limit($limit)->offset($offset);
            return $q->execute();
        // @codeCoverageIgnoreStart
        } catch (Exception $e) {
            throw new DaoException($e->getMessage(), $e->getCode(), $e);
        }  
    }
    
    public static function getApprovedRejectedAuditTrail($offset=0,$limit=2000){
         try {
            $q = Doctrine_Query:: create()->from('AuditTrail aud')
                                        ->where('aud.status !="pending"')
                                    ->orderBy('aud.id DESC')
                    
                    ->limit($limit)->offset($offset);
            return $q->execute();
        // @codeCoverageIgnoreStart
        } catch (Exception $e) {
            throw new DaoException($e->getMessage(), $e->getCode(), $e);
        }  
    }
    
     public static function getGroupedAuditTrail($offset=0,$limit=1000){
         try {
            $q = Doctrine_Query:: create()->from('AuditTrail aud')
                                ->where("status='pending'")
                   
                                    ->orderBy('aud.id DESC')
                 //->groupBy('aud.affected_user')
                    ->limit($limit)->offset($offset);
            return $q->execute();
        // @codeCoverageIgnoreStart
        } catch (Exception $e) {
            throw new DaoException($e->getMessage(), $e->getCode(), $e);
        }  
    }
     public static function getAuditTrailById($id){
         try {
            $q = Doctrine_Query:: create()->from('AuditTrail aud')
                     ->where("id =$id");
           $rows=$q->execute();
           return $rows;
        // @codeCoverageIgnoreStart
        } catch (Exception $e) {
            throw new DaoException($e->getMessage(), $e->getCode(), $e);
        }  
    }
    
     public static function getAuditTrailByEmployeeId($id){
         try {
            $q = Doctrine_Query:: create()->from('AuditTrail aud')
                     ->where("affected_user=$id")
                    
                     ->orderBy('aud.id DESC');
           $rows=$q->execute();
           return $rows;
        // @codeCoverageIgnoreStart
        } catch (Exception $e) {
            throw new DaoException($e->getMessage(), $e->getCode(), $e);
        }  
    }
     public static function getPendingAuditTrailByEmployeeId($id){
         try {
            $q = Doctrine_Query:: create()->from('AuditTrail aud')
                     ->where("affected_user=$id")
                     ->andWhere('status="pending"');
           $rows=$q->execute();
           return $rows;
        // @codeCoverageIgnoreStart
        } catch (Exception $e) {
            throw new DaoException($e->getMessage(), $e->getCode(), $e);
        }  
    }
    
    public static function getTrailByModule($module,$offset=0,$limit=500){
        $conn = Doctrine_Manager::connection();
       // die('Select * FROM audit_trail WHERE module="'.$module.'" LIMIT '.$limit.' OFFSET '.$offset);
        $pdo = $conn->execute('Select * FROM audit_trail aud WHERE module="'.$module.'" group by aud.affected_user  LIMIT '.$limit.' OFFSET '.$offset ); //WHERE hr.termination_id IS NULL
      
        $pdo->setFetchMode(Doctrine_Core::FETCH_ASSOC);
        $result = $pdo->fetchAll();
        return $result;

    }
    public static function getTrailByModuleLocationTime($module,$location,$fromdate,$todate,$offset=0,$limit=500){
        $conn = Doctrine_Manager::connection();
       // die('Select * FROM audit_trail WHERE module="'.$module.'" LIMIT '.$limit.' OFFSET '.$offset);
        if(!$location){
             $pdo = $conn->execute('Select * FROM audit_trail aud join hs_hr_emp_locations loc on aud.affected_user=loc.emp_number WHERE aud.module="'.$module.'"  AND DATE_FORMAT(aud.dateupdated,"%Y-%m-%d") BETWEEN "'.$fromdate.'" AND "'.$todate.'" group by aud.affected_user  LIMIT '.$limit.' OFFSET '.$offset ); //WHERE hr.termination_id IS NULL
        } else{
        $pdo = $conn->execute('Select * FROM audit_trail aud join hs_hr_emp_locations loc on aud.affected_user=loc.emp_number WHERE aud.module="'.$module.'" AND loc.location_id="'.$location.'" AND DATE_FORMAT(aud.dateupdated,"%Y-%m-%d") BETWEEN "'.$fromdate.'" AND "'.$todate.'" group by aud.affected_user  LIMIT '.$limit.' OFFSET '.$offset ); //WHERE hr.termination_id IS NULL
        }
        $pdo->setFetchMode(Doctrine_Core::FETCH_ASSOC);
        $result = $pdo->fetchAll();
        return $result;

    }
    
    public static function getTrailByModuleLocation($module,$location,$offset=0,$limit=500){
        $conn = Doctrine_Manager::connection();
       // die('Select * FROM audit_trail WHERE module="'.$module.'" LIMIT '.$limit.' OFFSET '.$offset);
        if(!$location){
             $pdo = $conn->execute('Select * FROM audit_trail aud join hs_hr_emp_locations loc on aud.affected_user=loc.emp_number WHERE aud.module="'.$module.'"   group by aud.affected_user  LIMIT '.$limit.' OFFSET '.$offset ); //WHERE hr.termination_id IS NULL
        } else{
        $pdo = $conn->execute('Select * FROM audit_trail aud join hs_hr_emp_locations loc on aud.affected_user=loc.emp_number WHERE aud.module="'.$module.'" AND loc.location_id='.$location.'  group by aud.affected_user  LIMIT '.$limit.' OFFSET '.$offset ); //WHERE hr.termination_id IS NULL
        }
        $pdo->setFetchMode(Doctrine_Core::FETCH_ASSOC);
        $result = $pdo->fetchAll();
        return $result;

    }
    
     public static function getApprovedTrailByModuleTime($module,$fromdate,$todate,$offset=0,$limit=500){
         if(!$fromdate){$fromdate=date("Y-m-01");} if(!$todate){$todate=date("Y-m-30");}
        $conn = Doctrine_Manager::connection();
       // die('Select * FROM audit_trail WHERE module="'.$module.'" LIMIT '.$limit.' OFFSET '.$offset);
        $pdo = $conn->execute('Select * FROM audit_trail aud  WHERE aud.module="'.$module.'"  AND DATE_FORMAT(aud.dateupdated,"%Y-%m-%d") BETWEEN "'.$fromdate.'" AND "'.$todate.'" AND aud.status="approved" group by aud.affected_user  LIMIT '.$limit.' OFFSET '.$offset ); //WHERE hr.termination_id IS NULL
      
        $pdo->setFetchMode(Doctrine_Core::FETCH_ASSOC);
        $result = $pdo->fetchAll();
        return $result;

    }
}